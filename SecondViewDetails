Second Tab

	The second tab is used to display a map of the user's current location. The map offers three choices of style;
  
Standard, which is the standard map view, with no satellite imagery, Satellite, which is a purely sattelite

view with no details about street names, or landmarks, and Hybrid, which is a satellite image with street

names and landmarks included. The user may also tap "my location" in the top right hand corner to zoom in (or out)

on their current location. Besides being just a simple map, however, the map also generates a red path on top of the

map overlay to show the user the path they have recently taken (since the app was opened).

	The ViewController.h file for this view imports the MapKit and CoreLocation frameworks. It 

uses <MKMapViewDelegate, CLLocationManagerDelegate>, which is required when using CLLocationManager. It also declares some 

instance variables:

    			NSNumber *maxRecordedSpeed;

   			int timeTick;

    			int minutes;

    			NSTimer *timer;

These variables are used to keep track of the max speed the user has traveled since last reset or 

starting the app, as well as variables to keep track of how long the app has been gathering information. 

Finally, it creates the CMPedometer and a CLLocationManager that will be used in the view, and links all 

the storyboard elements.

	The ViewController.m file contains all the code related to the functionality of the first tab. 

The first function, as usual, is (void)viewDidLoad. Within this function the base operations of the view 

begin and variables are set up. First, the timer variables are set to zero:

    	timeTick = 0;
    	minutes = 0;
	self.maxRecordedSpeed = 0;
	kmh = false;

Next, the CMPedometer and CLLocation manager are allocated and innitialize and told to begin tracking 

user movement:

	self.pedometer = [[CMPedometer alloc] init];

    	[self.pedometer startPedometerUpdatesFromDate:[NSDate date] withHandler:^(CMPedometerData * 

_Nullable data, NSError *err) {

            
        [self updateData:data];

	    }];


    	locationManager =[[CLLocationManager alloc]init];
    	locationManager.delegate = self;
    	locationManager.desiredAccuracy = kCLLocationAccuracyBest;
    	locationManager.distanceFilter = kCLDistanceFilterNone;
    	[locationManager requestWhenInUseAuthorization];
    	[locationManager startMonitoringSignificantLocationChanges];
	[locationManager startUpdatingLocation];

Finally, the timer is set to start recording:

	[self startTimer];

The next function (after the required/default (void)didReceiveMemoryWarning) function) is the function 

that is called when we started the CMPedometer:
	
	(void)updateData:(CMPedometerData *)data

Within this function, checks are made to determine if data user data is available. The data we chose to 

display from the CMPedometer generated data are steps taken, distance traveled, average speed, and steps 

per second (cadence). If these values are avaiable they are displayed in their corresponding UILabels, 

otherwise, the UILabels are set to "N/A" (not available).

Next is the function that is used (and required) by CLLoationManager to track the user's location:

	(void) locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations

The first thing this function does is get the most update location for the user's device from the 

locations array that is recieves from CoreLocation. It then displays the speed the device is traveling 

and displays it in the corresponding UILabel. Finally, it checks if the current speed is greater than 

the max recorded speed. If it is greater. it sets the max speed, to the current speed. It then displays 

the max speed in the corresponding UILabel.

In order to properly implement CLLocationManager, the following method must be used to catch any errors:

	(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error

This function simply catches errors and, if an error is found, stops the CLLocationManager from 

updating.

Now we implement the functions for the timer. First we define the function that was called at the end of 

viewDidLoad:

	(void)startTimer

This function simply declares the timer and calls the handler function:

	(void) myTicker

Within this function the timer is calculated and displayed. First, it increments the timeTick variable, 

which is used to keep track of seconds, since we declared out timer with an interval of 1.0. If this 

value is less than 10, it is simply fomatted so it does not have a zero in front of it and displayed. 

Then there is a check to see if the seconds (timeTick) value has reached 60 (one minute). If it has, the 

seconds are reset to zero and the minutes variable is incremented by one. The minutes value is then 

displayed in the approriate UILabel.

The final two functions are used to handle the buttons being pressed. First, we have the function for 

the reset button:

	(IBAction)resetButton:(id)sender 

This function simply resets the values being displayed to and reclares the CMPedometer to start tracking 

again in order to clear the total steps taken.

The last function is used to handle the conversion button:

	(IBAction)convertButton:(id)sender

This is used to convert the values from meters per second to kilometers per hour by mutlipling the 

current values 3.6 and displaying the results. It also sets a boolean value, kmh, to true or false.

When true, the values to be displayed on update are in km/h, and when false, the updates will revert

back to m/s.

There were several challenges associated with the implementation of this tab. The first was a limitation of CMPedometer, in 
that it is not possible to get live (step by step) updates. We had to settle for updating several times a minute. Another 
challenge, which we failed to overcome in the time allowed, was to keep CMPedometer recording data while in the background. 
This was due to the fact that up until very recently, it seems, CoreMotion was entirely unable to do so. After much research, 
we were unable to find a solution that could be implemented.  While this feature is not included in this version, we are 
confident that given more time we could accomplish this goal.
