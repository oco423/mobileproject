Second Tab

	The second tab is used to display a map of the user's current location. The map offers three choices of style;
  
Standard, which is the standard map view, with no satellite imagery, Satellite, which is a purely sattelite

view with no details about street names, or landmarks, and Hybrid, which is a satellite image with street

names and landmarks included. The user may also tap "my location" in the top right hand corner to zoom in (or out)

on their current location. Besides being just a simple map, however, the map also generates a red path on top of the

map overlay to show the user the path they have recently taken (since the app was opened).

	The ViewController.h file for this view imports the MapKit and CoreLocation frameworks. It 

uses <MKMapViewDelegate, CLLocationManagerDelegate>, which are required when using MapKit and CLLocationManager. It delcares

references to the map view and the custom classes CrumbPath and CrumbPathRenderer, which are classes included in

Apple's "BreadCrumb" demo application. These classes will be discussed in detail below.

	The ViewController.m file contains all the code related to the functionality of the second tab. 

The first function, as usual, is (void)viewDidLoad. Within this function the base operations of the view 

begin and variables are set up. First, the map is set to show the user location:

    	self.mapView.showsUserLocation = YES;

Then, if the app is not authorized when in use to use location data already, the map view will request to do so:

	if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 8.0 && [CLLocationManager authorizationStatus] != kCLAuthorizationStatusAuthorizedWhenInUse)
    {
        [locationManager requestWhenInUseAuthorization];
    }

After viewDidLoad is didUpdateLocations, which includes sending updates to the CrumbPath and CrumbPathRenderer. If

this is the first time a location has been updated, initialize the CrumbPath:
	
	 _crumbs = [[CrumbPath alloc] initWithCenterCoordinate:location.coordinate];
        [self.mapView addOverlay:self.crumbs level:MKOverlayLevelAboveRoads];
	
As you can see, CrumbPath is an extension of MKOverlay. In essence, the CrumbPath is a collection of points

to draw along a polyline on top of the map. This allow the user to see their recent path. Note that the drawing is only

done if the user moves 10m or more from their previous location at update time.

If this is a subsequent location update, the point is added to the collection of points in CrumbPath, if it is 10m or more

from the previous location:

	[self.crumbPathRenderer setNeedsDisplayInMapRect:updateRect];

This view controller contains a variety of other methods required to draw the user's path on top of the map view. The next

method of interest is a function called by the segmented button to choose the map type:

        case 0:
            self.mapView.mapType = MKMapTypeStandard;
            break;
	  
For each segment (0, 1, 2) the map type is changed depending on which segment is currently selected.

The next method is zoomToCurrentLocation, which will zoom, in or out until the device's width display 725m across, on

the user's current location. It is called when the button "My Location" is tapped:

    float spanX = 0.00725;
    float spanY = 0.00725;
    MKCoordinateRegion region;

    region.center.latitude = coordinate.latitude;
    region.center.longitude = coordinate.longitude;
    region.span.latitudeDelta = spanX;
    region.span.longitudeDelta = spanY;
    
    [self.mapView setRegion:region animated:YES];
    
The MKCoordinateRegion region is the aforementioned 725mx725m zoom on the user's location.

	This tab also presented our group with some challenges. While we attempted to draw the user's path through our own methods,

it became clear that this was going to be a challenge. Initially, we attempted to use a Google Maps API, and a file known as

<GoogleMaps/GoogleMaps.h>, which included some drawing methods to achieve this goal. However, this proved to be difficult and

buggy, 
